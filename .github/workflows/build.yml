# Builds LWJGL and runs tests.
# No artifacts are uploaded, see LWJGL-CI/lwjgl3 for that.
name: LWJGL Build

on:
  workflow_dispatch:
  #push:
    #branches:
      #- master

env:
  JAVA_HOME: jdk8
  ANT_OPTS: -Xmx1G
  LWJGL_BUILD_TYPE: nightly

jobs:
  cache-kotlinc:
    name: Compile templates and cache kotlinc output
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - name: Download JDK
        run: |
          mkdir jdk8
          curl https://cdn.azul.com/zulu/bin/zulu8.72.0.17-ca-jdk8.0.382-linux_x64.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Compile templates
        run: |
          git clone https://github.com/LWJGL-CI/OculusSDK.git ../OculusSDK
          ANT_OPTS=-Xmx4G ant -emacs compile-templates -Dbackend-threads=0
      - name: Cache kotlinc output
        uses: actions/cache/save@v3
        with:
          path: |
            bin/classes/generator
            bin/classes/templates
          key: cache-kotlinc-${{ github.sha }}
          enableCrossOsArchive: true


  macos:
    name: macOS
    needs: cache-kotlinc
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64, arm64]
    env:
      LWJGL_BUILD_ARCH: ${{matrix.ARCH}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - name: Install dependencies
        run: |
          mkdir jdk8
          curl -L https://cdn.azul.com/zulu/bin/zulu8.72.0.17-ca-fx-jdk8.0.382-macosx_x64.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Restore kotlinc output
        uses: actions/cache/restore@v3
        with:
          path: |
            bin/classes/generator
            bin/classes/templates
          key: cache-kotlinc-${{ github.sha }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
      - name: Generate bindings
        run: ant -emacs clean-generated generate
      - name: Build Java
        run: ant -emacs compile
      - name: Build native
        run: ant -emacs compile-native
      - name: Run tests
        run: ant -emacs tests
        if: matrix.ARCH == 'x64'
      - name: Run demo with OpenJDK
        run: ant demo -Dclass=org.lwjgl.demo.util.lz4.HelloLZ4
        if: matrix.ARCH == 'x64'
      - name: Build GraalVM Native Image
        run: |
          mkdir jdk-graalvm-21
          curl -L https://download.oracle.com/graalvm/21/latest/graalvm-jdk-21_macos-x64_bin.tar.gz | tar xz -C jdk-graalvm-21 --strip-components 1
          jdk-graalvm-21/Contents/Home/bin/native-image -cp \
          bin/classes/lwjgl/core:\
          bin/classes/lwjgl/lz4:\
          bin/classes/samples:\
          modules/samples/src/test/resources:\
          bin/libs/java/joml.jar:\
          bin/libs/native:\
          config/native-image \
          org.lwjgl.demo.util.lz4.HelloLZ4 --verbose --no-fallback
        if: matrix.ARCH == 'x64'
      - name: Run demo with GraalVM JIT
        run: JAVA_HOME=jdk-graalvm-21/Contents/Home ant demo -Dclass=org.lwjgl.demo.util.lz4.HelloLZ4
        if: matrix.ARCH == 'x64'
      - name: Run demo with GraalVM Native Image
        run: ./org.lwjgl.demo.util.lz4.hellolz4
        if: matrix.ARCH == 'x64'

